(set-info :smt-lib-version 2.6)
(set-logic QF_NIA)
(set-info :source |
Generated by: Cristina Borralleras, Daniel Larraz, Albert Oliveras, Enric Rodriguez-Carbonell, Albert Rubio
Generated on: 2017-04-27
Generator: VeryMax
Application: Termination proving
Target solver: barcelogic
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun Nl2main_x1 () Int)
(declare-fun Nl2main_x2 () Int)
(declare-fun lam0n0 () Int)
(declare-fun lam0n1 () Int)
(declare-fun lam0n2 () Int)
(declare-fun Nl2CT1 () Int)
(declare-fun Nl2CT2 () Int)
(declare-fun lam1n0 () Int)
(declare-fun lam1n1 () Int)
(declare-fun lam1n2 () Int)
(declare-fun lam2n0 () Int)
(declare-fun lam2n1 () Int)
(declare-fun lam2n2 () Int)
(declare-fun lam3n0 () Int)
(declare-fun lam4n0 () Int)
(declare-fun main_x () Int)
(declare-fun undef2 () Int)
(declare-fun FV_main_x_1 () Int)
(declare-fun lam5n0 () Int)
(declare-fun lam5n1 () Int)
(declare-fun lam5n2 () Int)
(declare-fun FV_main_x_2 () Int)
(assert ( and ( <= ( - 10 ) Nl2main_x1 ) ( <= Nl2main_x1 10 ) ( <= ( - 10 ) Nl2main_x2 ) ( <= Nl2main_x2 10 ) ))
(assert ( or ( and ( >= lam0n0 0 ) ( >= lam0n1 0 ) ( >= lam0n2 0 ) ( > ( + ( * 1 lam0n0 ) ( * Nl2CT1 lam0n1 ) ( * Nl2CT2 lam0n2 ) ( - 1 ) ) 0 ) ( = ( + ( * ( - 1 ) lam0n0 ) ( * Nl2main_x1 lam0n1 ) ( * Nl2main_x2 lam0n2 ) ) 0 ) ) ( and ( >= lam1n0 0 ) ( >= lam1n1 0 ) ( >= lam1n2 0 ) ( > ( + ( * 1 lam1n0 ) ( * Nl2CT1 lam1n1 ) ( * Nl2CT2 lam1n2 ) ( - 1 ( + Nl2CT1 ( * Nl2main_x1 10 ) ) ) ) 0 ) ( = ( + ( * ( - 1 ) lam1n0 ) ( * Nl2main_x1 lam1n1 ) ( * Nl2main_x2 lam1n2 ) ( - ( + 0 ( * Nl2main_x1 ( - 2 ) ) ) ) ) 0 ) ) ))
(assert ( or ( and ( >= lam0n0 0 ) ( >= lam0n1 0 ) ( >= lam0n2 0 ) ( > ( + ( * 1 lam0n0 ) ( * Nl2CT1 lam0n1 ) ( * Nl2CT2 lam0n2 ) ( - 1 ) ) 0 ) ( = ( + ( * ( - 1 ) lam0n0 ) ( * Nl2main_x1 lam0n1 ) ( * Nl2main_x2 lam0n2 ) ) 0 ) ) ( and ( >= lam2n0 0 ) ( >= lam2n1 0 ) ( >= lam2n2 0 ) ( > ( + ( * 1 lam2n0 ) ( * Nl2CT1 lam2n1 ) ( * Nl2CT2 lam2n2 ) ( - 1 ( + Nl2CT2 ( * Nl2main_x2 10 ) ) ) ) 0 ) ( = ( + ( * ( - 1 ) lam2n0 ) ( * Nl2main_x1 lam2n1 ) ( * Nl2main_x2 lam2n2 ) ( - ( + 0 ( * Nl2main_x2 ( - 2 ) ) ) ) ) 0 ) ) ))
(assert ( and ( <= ( + Nl2CT1 ( * Nl2main_x1 FV_main_x_1 ) ) 0 ) ( <= ( + Nl2CT2 ( * Nl2main_x2 FV_main_x_1 ) ) 0 ) ))
(assert ( and ( >= lam5n0 0 ) ( >= lam5n1 0 ) ( >= lam5n2 0 ) ( > ( + ( * Nl2CT1 lam5n1 ) ( * Nl2CT2 lam5n2 ) ( - 1 ) ) 0 ) ( = ( + ( * 1 lam5n0 ) ( * Nl2main_x1 lam5n1 ) ( * Nl2main_x2 lam5n2 ) ) 0 ) ))
(assert ( and ( and ( <= ( + Nl2CT1 ( * Nl2main_x1 FV_main_x_2 ) ) 0 ) ( <= ( + Nl2CT2 ( * Nl2main_x2 FV_main_x_2 ) ) 0 ) ) ( <= ( + 1 ( * ( - 1 ) FV_main_x_2 ) ) 0 ) ))
(check-sat)
(exit)
