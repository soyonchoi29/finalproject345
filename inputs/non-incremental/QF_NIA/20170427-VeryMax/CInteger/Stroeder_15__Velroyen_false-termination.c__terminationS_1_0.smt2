(set-info :smt-lib-version 2.6)
(set-logic QF_NIA)
(set-info :source |
Generated by: Cristina Borralleras, Daniel Larraz, Albert Oliveras, Enric Rodriguez-Carbonell, Albert Rubio
Generated on: 2017-04-27
Generator: VeryMax
Application: Termination proving
Target solver: barcelogic
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun Nl2main_x1 () Int)
(declare-fun lam0n0 () Int)
(declare-fun lam0n1 () Int)
(declare-fun lam0n2 () Int)
(declare-fun Nl2CT1 () Int)
(declare-fun lam1n0 () Int)
(declare-fun lam1n1 () Int)
(declare-fun lam1n2 () Int)
(declare-fun lam2n0 () Int)
(declare-fun lam2n1 () Int)
(declare-fun lam3n0 () Int)
(declare-fun lam3n1 () Int)
(declare-fun lam4n0 () Int)
(declare-fun lam4n1 () Int)
(declare-fun lam4n2 () Int)
(declare-fun lam5n0 () Int)
(declare-fun lam5n1 () Int)
(declare-fun lam5n2 () Int)
(declare-fun lam6n0 () Int)
(declare-fun lam6n1 () Int)
(declare-fun lam6n2 () Int)
(declare-fun lam7n0 () Int)
(declare-fun lam7n1 () Int)
(declare-fun lam7n2 () Int)
(declare-fun lam8n0 () Int)
(declare-fun lam8n1 () Int)
(declare-fun lam9n0 () Int)
(declare-fun lam9n1 () Int)
(declare-fun lam12n0 () Int)
(declare-fun lam12n1 () Int)
(declare-fun lam12n2 () Int)
(declare-fun RFN1_CT () Int)
(declare-fun RFN1_main_x () Int)
(declare-fun lam15n0 () Int)
(declare-fun lam15n1 () Int)
(declare-fun lam18n0 () Int)
(declare-fun lam18n1 () Int)
(declare-fun lam18n2 () Int)
(declare-fun lam21n0 () Int)
(declare-fun lam21n1 () Int)
(declare-fun lam21n2 () Int)
(declare-fun lam24n0 () Int)
(declare-fun lam24n1 () Int)
(declare-fun lam19n0 () Int)
(declare-fun lam19n1 () Int)
(declare-fun lam19n2 () Int)
(declare-fun lam20n0 () Int)
(declare-fun lam20n1 () Int)
(declare-fun lam20n2 () Int)
(declare-fun lam25n0 () Int)
(declare-fun lam25n1 () Int)
(declare-fun lam25n2 () Int)
(assert ( and ( <= ( - 35 ) Nl2main_x1 ) ( <= Nl2main_x1 35 ) ))
(assert ( or ( and ( >= lam0n0 0 ) ( >= lam0n1 0 ) ( >= lam0n2 0 ) ( > ( + ( * ( - 5 ) lam0n0 ) ( * 1 lam0n1 ) ( * Nl2CT1 lam0n2 ) ( - 1 ) ) 0 ) ( = ( + ( * ( - 1 ) lam0n0 ) ( * 1 lam0n1 ) ( * Nl2main_x1 lam0n2 ) ) 0 ) ) ( and ( >= lam1n0 0 ) ( >= lam1n1 0 ) ( >= lam1n2 0 ) ( > ( + ( * ( - 5 ) lam1n0 ) ( * 1 lam1n1 ) ( * Nl2CT1 lam1n2 ) ( - 1 ( + Nl2CT1 ( * Nl2main_x1 ( - 5 ) ) ) ) ) 0 ) ( = ( + ( * ( - 1 ) lam1n0 ) ( * 1 lam1n1 ) ( * Nl2main_x1 lam1n2 ) ) 0 ) ) ))
(assert ( or ( and ( >= lam2n0 0 ) ( >= lam2n1 0 ) ( > ( + ( * 6 lam2n0 ) ( * Nl2CT1 lam2n1 ) ( - 1 ) ) 0 ) ( = ( + ( * 1 lam2n0 ) ( * Nl2main_x1 lam2n1 ) ) 0 ) ) ( and ( >= lam3n0 0 ) ( >= lam3n1 0 ) ( > ( + ( * 6 lam3n0 ) ( * Nl2CT1 lam3n1 ) ( - 1 ( + Nl2CT1 ( * Nl2main_x1 0 ) ) ) ) 0 ) ( = ( + ( * 1 lam3n0 ) ( * Nl2main_x1 lam3n1 ) ) 0 ) ) ))
(assert ( or ( and ( >= lam4n0 0 ) ( >= lam4n1 0 ) ( >= lam4n2 0 ) ( > ( + ( * ( - 35 ) lam4n0 ) ( * 31 lam4n1 ) ( * Nl2CT1 lam4n2 ) ( - 1 ) ) 0 ) ( = ( + ( * 1 lam4n0 ) ( * ( - 1 ) lam4n1 ) ( * Nl2main_x1 lam4n2 ) ) 0 ) ) ( and ( >= lam5n0 0 ) ( >= lam5n1 0 ) ( >= lam5n2 0 ) ( > ( + ( * ( - 35 ) lam5n0 ) ( * 31 lam5n1 ) ( * Nl2CT1 lam5n2 ) ( - 1 ( + Nl2CT1 ( * Nl2main_x1 35 ) ) ) ) 0 ) ( = ( + ( * 1 lam5n0 ) ( * ( - 1 ) lam5n1 ) ( * Nl2main_x1 lam5n2 ) ) 0 ) ) ))
(assert ( or ( and ( >= lam6n0 0 ) ( >= lam6n1 0 ) ( >= lam6n2 0 ) ( > ( + ( * 1 lam6n0 ) ( * ( - 30 ) lam6n1 ) ( * Nl2CT1 lam6n2 ) ( - 1 ) ) 0 ) ( = ( + ( * ( - 1 ) lam6n0 ) ( * 1 lam6n1 ) ( * Nl2main_x1 lam6n2 ) ) 0 ) ) ( and ( >= lam7n0 0 ) ( >= lam7n1 0 ) ( >= lam7n2 0 ) ( > ( + ( * 1 lam7n0 ) ( * ( - 30 ) lam7n1 ) ( * Nl2CT1 lam7n2 ) ( - 1 ( + Nl2CT1 ( * Nl2main_x1 ( - 1 ) ) ) ) ) 0 ) ( = ( + ( * ( - 1 ) lam7n0 ) ( * 1 lam7n1 ) ( * Nl2main_x1 lam7n2 ) ( - ( + 0 ( * Nl2main_x1 1 ) ) ) ) 0 ) ) ))
(assert ( or ( and ( >= lam8n0 0 ) ( >= lam8n1 0 ) ( > ( + ( * 36 lam8n0 ) ( * Nl2CT1 lam8n1 ) ( - 1 ) ) 0 ) ( = ( + ( * ( - 1 ) lam8n0 ) ( * Nl2main_x1 lam8n1 ) ) 0 ) ) ( and ( >= lam9n0 0 ) ( >= lam9n1 0 ) ( > ( + ( * 36 lam9n0 ) ( * Nl2CT1 lam9n1 ) ( - 1 ( + Nl2CT1 ( * Nl2main_x1 0 ) ) ) ) 0 ) ( = ( + ( * ( - 1 ) lam9n0 ) ( * Nl2main_x1 lam9n1 ) ) 0 ) ) ))
(assert ( and ( or ( and ( >= lam0n0 0 ) ( >= lam0n1 0 ) ( >= lam0n2 0 ) ( > ( + ( * ( - 5 ) lam0n0 ) ( * 1 lam0n1 ) ( * Nl2CT1 lam0n2 ) ( - 1 ) ) 0 ) ( = ( + ( * ( - 1 ) lam0n0 ) ( * 1 lam0n1 ) ( * Nl2main_x1 lam0n2 ) ) 0 ) ) ( and ( >= lam12n0 0 ) ( >= lam12n1 0 ) ( >= lam12n2 0 ) ( > ( + ( * ( - 5 ) lam12n0 ) ( * 1 lam12n1 ) ( * Nl2CT1 lam12n2 ) ( - 1 ( - ( + RFN1_CT ( * RFN1_main_x ( - 5 ) ) ) RFN1_CT ) ) ) 0 ) ( = ( + ( * ( - 1 ) lam12n0 ) ( * 1 lam12n1 ) ( * Nl2main_x1 lam12n2 ) ( - ( - RFN1_main_x ) ) ) 0 ) ) ) ( or ( and ( >= lam2n0 0 ) ( >= lam2n1 0 ) ( > ( + ( * 6 lam2n0 ) ( * Nl2CT1 lam2n1 ) ( - 1 ) ) 0 ) ( = ( + ( * 1 lam2n0 ) ( * Nl2main_x1 lam2n1 ) ) 0 ) ) ( and ( >= lam15n0 0 ) ( >= lam15n1 0 ) ( > ( + ( * 6 lam15n0 ) ( * Nl2CT1 lam15n1 ) ( - 1 ( - ( + RFN1_CT ( * RFN1_main_x 0 ) ) RFN1_CT ) ) ) 0 ) ( = ( + ( * 1 lam15n0 ) ( * Nl2main_x1 lam15n1 ) ( - ( - RFN1_main_x ) ) ) 0 ) ) ) ( or ( and ( >= lam4n0 0 ) ( >= lam4n1 0 ) ( >= lam4n2 0 ) ( > ( + ( * ( - 35 ) lam4n0 ) ( * 31 lam4n1 ) ( * Nl2CT1 lam4n2 ) ( - 1 ) ) 0 ) ( = ( + ( * 1 lam4n0 ) ( * ( - 1 ) lam4n1 ) ( * Nl2main_x1 lam4n2 ) ) 0 ) ) ( and ( >= lam18n0 0 ) ( >= lam18n1 0 ) ( >= lam18n2 0 ) ( > ( + ( * ( - 35 ) lam18n0 ) ( * 31 lam18n1 ) ( * Nl2CT1 lam18n2 ) ( - 1 ( - ( + RFN1_CT ( * RFN1_main_x 35 ) ) RFN1_CT ) ) ) 0 ) ( = ( + ( * 1 lam18n0 ) ( * ( - 1 ) lam18n1 ) ( * Nl2main_x1 lam18n2 ) ( - ( - RFN1_main_x ) ) ) 0 ) ) ) ( or ( and ( >= lam6n0 0 ) ( >= lam6n1 0 ) ( >= lam6n2 0 ) ( > ( + ( * 1 lam6n0 ) ( * ( - 30 ) lam6n1 ) ( * Nl2CT1 lam6n2 ) ( - 1 ) ) 0 ) ( = ( + ( * ( - 1 ) lam6n0 ) ( * 1 lam6n1 ) ( * Nl2main_x1 lam6n2 ) ) 0 ) ) ( and ( >= lam21n0 0 ) ( >= lam21n1 0 ) ( >= lam21n2 0 ) ( > ( + ( * 1 lam21n0 ) ( * ( - 30 ) lam21n1 ) ( * Nl2CT1 lam21n2 ) ( - 1 ( - ( + RFN1_CT ( * RFN1_main_x ( - 1 ) ) ) RFN1_CT ) ) ) 0 ) ( = ( + ( * ( - 1 ) lam21n0 ) ( * 1 lam21n1 ) ( * Nl2main_x1 lam21n2 ) ( - ( - ( + 0 ( * RFN1_main_x 1 ) ) RFN1_main_x ) ) ) 0 ) ) ) ( or ( and ( >= lam8n0 0 ) ( >= lam8n1 0 ) ( > ( + ( * 36 lam8n0 ) ( * Nl2CT1 lam8n1 ) ( - 1 ) ) 0 ) ( = ( + ( * ( - 1 ) lam8n0 ) ( * Nl2main_x1 lam8n1 ) ) 0 ) ) ( and ( >= lam24n0 0 ) ( >= lam24n1 0 ) ( > ( + ( * 36 lam24n0 ) ( * Nl2CT1 lam24n1 ) ( - 1 ( - ( + RFN1_CT ( * RFN1_main_x 0 ) ) RFN1_CT ) ) ) 0 ) ( = ( + ( * ( - 1 ) lam24n0 ) ( * Nl2main_x1 lam24n1 ) ( - ( - RFN1_main_x ) ) ) 0 ) ) ) ))
(assert ( and ( and ( and ( >= lam19n0 0 ) ( >= lam19n1 0 ) ( >= lam19n2 0 ) ( > ( + ( * 1 lam19n0 ) ( * ( - 30 ) lam19n1 ) ( * Nl2CT1 lam19n2 ) ( - 1 ( - RFN1_CT ) ) ) 0 ) ( = ( + ( * ( - 1 ) lam19n0 ) ( * 1 lam19n1 ) ( * Nl2main_x1 lam19n2 ) ( - ( - RFN1_main_x ) ) ) 0 ) ) ( and ( >= lam20n0 0 ) ( >= lam20n1 0 ) ( >= lam20n2 0 ) ( > ( + ( * 1 lam20n0 ) ( * ( - 30 ) lam20n1 ) ( * Nl2CT1 lam20n2 ) ( - 1 ( + ( - ( + RFN1_CT ( * RFN1_main_x ( - 1 ) ) ) RFN1_CT ) 1 ) ) ) 0 ) ( = ( + ( * ( - 1 ) lam20n0 ) ( * 1 lam20n1 ) ( * Nl2main_x1 lam20n2 ) ( - ( - ( + 0 ( * RFN1_main_x 1 ) ) RFN1_main_x ) ) ) 0 ) ) ) ( and ( >= lam25n0 0 ) ( >= lam25n1 0 ) ( >= lam25n2 0 ) ( > ( + ( * 1 lam25n0 ) ( * ( - 30 ) lam25n1 ) ( * ( + ( - Nl2CT1 ) 1 ) lam25n2 ) ( - 1 ) ) 0 ) ( = ( + ( * ( - 1 ) lam25n0 ) ( * 1 lam25n1 ) ( * ( - Nl2main_x1 ) lam25n2 ) ) 0 ) ) ))
(check-sat)
(exit)
