(set-info :smt-lib-version 2.6)
(set-logic QF_NIA)
(set-info :source |
Generated by: Cristina Borralleras, Daniel Larraz, Albert Oliveras, Enric Rodriguez-Carbonell, Albert Rubio
Generated on: 2017-04-27
Generator: VeryMax
Application: Termination proving
Target solver: barcelogic
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status sat)
(declare-fun Nl3main_x1 () Int)
(declare-fun Nl3main_x2 () Int)
(declare-fun Nl3main_x3 () Int)
(declare-fun lam0n0 () Int)
(declare-fun lam0n1 () Int)
(declare-fun lam0n2 () Int)
(declare-fun lam0n3 () Int)
(declare-fun Nl3CT1 () Int)
(declare-fun Nl3CT2 () Int)
(declare-fun Nl3CT3 () Int)
(declare-fun lam1n0 () Int)
(declare-fun lam1n1 () Int)
(declare-fun lam1n2 () Int)
(declare-fun lam1n3 () Int)
(declare-fun lam2n0 () Int)
(declare-fun lam2n1 () Int)
(declare-fun lam2n2 () Int)
(declare-fun lam2n3 () Int)
(declare-fun lam3n0 () Int)
(declare-fun lam3n1 () Int)
(declare-fun lam3n2 () Int)
(declare-fun lam3n3 () Int)
(declare-fun lam4n0 () Int)
(declare-fun lam4n1 () Int)
(declare-fun lam4n2 () Int)
(declare-fun lam4n3 () Int)
(declare-fun lam5n0 () Int)
(declare-fun lam5n1 () Int)
(declare-fun lam5n2 () Int)
(declare-fun lam5n3 () Int)
(declare-fun lam6n0 () Int)
(declare-fun lam6n1 () Int)
(declare-fun lam6n2 () Int)
(declare-fun lam6n3 () Int)
(declare-fun lam7n0 () Int)
(declare-fun lam7n1 () Int)
(declare-fun lam7n2 () Int)
(declare-fun lam7n3 () Int)
(declare-fun lam8n0 () Int)
(declare-fun lam8n1 () Int)
(declare-fun lam9n0 () Int)
(declare-fun lam9n1 () Int)
(declare-fun lam10n0 () Int)
(declare-fun lam10n1 () Int)
(declare-fun undef2 () Int)
(declare-fun main_x () Int)
(declare-fun FV_main_x_2 () Int)
(declare-fun lam11n1 () Int)
(declare-fun lam11n2 () Int)
(declare-fun lam11n3 () Int)
(declare-fun lam11n0 () Int)
(declare-fun FV_main_x_3 () Int)
(assert ( and ( <= ( - 2 ) Nl3main_x1 ) ( <= Nl3main_x1 2 ) ( <= ( - 2 ) Nl3main_x2 ) ( <= Nl3main_x2 2 ) ( <= ( - 2 ) Nl3main_x3 ) ( <= Nl3main_x3 2 ) ))
(assert ( or ( and ( >= lam0n0 0 ) ( >= lam0n1 0 ) ( >= lam0n2 0 ) ( >= lam0n3 0 ) ( > ( + ( * 1 lam0n0 ) ( * Nl3CT1 lam0n1 ) ( * Nl3CT2 lam0n2 ) ( * Nl3CT3 lam0n3 ) ( - 1 ) ) 0 ) ( = ( + ( * 1 lam0n0 ) ( * Nl3main_x1 lam0n1 ) ( * Nl3main_x2 lam0n2 ) ( * Nl3main_x3 lam0n3 ) ) 0 ) ) ( and ( >= lam1n0 0 ) ( >= lam1n1 0 ) ( >= lam1n2 0 ) ( >= lam1n3 0 ) ( > ( + ( * 1 lam1n0 ) ( * Nl3CT1 lam1n1 ) ( * Nl3CT2 lam1n2 ) ( * Nl3CT3 lam1n3 ) ( - 1 ( + Nl3CT1 ( * Nl3main_x1 ( - 2 ) ) ) ) ) 0 ) ( = ( + ( * 1 lam1n0 ) ( * Nl3main_x1 lam1n1 ) ( * Nl3main_x2 lam1n2 ) ( * Nl3main_x3 lam1n3 ) ( - ( + 0 ( * Nl3main_x1 1 ) ) ) ) 0 ) ) ))
(assert ( or ( and ( >= lam0n0 0 ) ( >= lam0n1 0 ) ( >= lam0n2 0 ) ( >= lam0n3 0 ) ( > ( + ( * 1 lam0n0 ) ( * Nl3CT1 lam0n1 ) ( * Nl3CT2 lam0n2 ) ( * Nl3CT3 lam0n3 ) ( - 1 ) ) 0 ) ( = ( + ( * 1 lam0n0 ) ( * Nl3main_x1 lam0n1 ) ( * Nl3main_x2 lam0n2 ) ( * Nl3main_x3 lam0n3 ) ) 0 ) ) ( and ( >= lam2n0 0 ) ( >= lam2n1 0 ) ( >= lam2n2 0 ) ( >= lam2n3 0 ) ( > ( + ( * 1 lam2n0 ) ( * Nl3CT1 lam2n1 ) ( * Nl3CT2 lam2n2 ) ( * Nl3CT3 lam2n3 ) ( - 1 ( + Nl3CT2 ( * Nl3main_x2 ( - 2 ) ) ) ) ) 0 ) ( = ( + ( * 1 lam2n0 ) ( * Nl3main_x1 lam2n1 ) ( * Nl3main_x2 lam2n2 ) ( * Nl3main_x3 lam2n3 ) ( - ( + 0 ( * Nl3main_x2 1 ) ) ) ) 0 ) ) ))
(assert ( or ( and ( >= lam0n0 0 ) ( >= lam0n1 0 ) ( >= lam0n2 0 ) ( >= lam0n3 0 ) ( > ( + ( * 1 lam0n0 ) ( * Nl3CT1 lam0n1 ) ( * Nl3CT2 lam0n2 ) ( * Nl3CT3 lam0n3 ) ( - 1 ) ) 0 ) ( = ( + ( * 1 lam0n0 ) ( * Nl3main_x1 lam0n1 ) ( * Nl3main_x2 lam0n2 ) ( * Nl3main_x3 lam0n3 ) ) 0 ) ) ( and ( >= lam3n0 0 ) ( >= lam3n1 0 ) ( >= lam3n2 0 ) ( >= lam3n3 0 ) ( > ( + ( * 1 lam3n0 ) ( * Nl3CT1 lam3n1 ) ( * Nl3CT2 lam3n2 ) ( * Nl3CT3 lam3n3 ) ( - 1 ( + Nl3CT3 ( * Nl3main_x3 ( - 2 ) ) ) ) ) 0 ) ( = ( + ( * 1 lam3n0 ) ( * Nl3main_x1 lam3n1 ) ( * Nl3main_x2 lam3n2 ) ( * Nl3main_x3 lam3n3 ) ( - ( + 0 ( * Nl3main_x3 1 ) ) ) ) 0 ) ) ))
(assert ( or ( and ( >= lam4n0 0 ) ( >= lam4n1 0 ) ( >= lam4n2 0 ) ( >= lam4n3 0 ) ( > ( + ( * 1 lam4n0 ) ( * Nl3CT1 lam4n1 ) ( * Nl3CT2 lam4n2 ) ( * Nl3CT3 lam4n3 ) ( - 1 ) ) 0 ) ( = ( + ( * ( - 1 ) lam4n0 ) ( * Nl3main_x1 lam4n1 ) ( * Nl3main_x2 lam4n2 ) ( * Nl3main_x3 lam4n3 ) ) 0 ) ) ( and ( >= lam5n0 0 ) ( >= lam5n1 0 ) ( >= lam5n2 0 ) ( >= lam5n3 0 ) ( > ( + ( * 1 lam5n0 ) ( * Nl3CT1 lam5n1 ) ( * Nl3CT2 lam5n2 ) ( * Nl3CT3 lam5n3 ) ( - 1 ( + Nl3CT1 ( * Nl3main_x1 ( - 2 ) ) ) ) ) 0 ) ( = ( + ( * ( - 1 ) lam5n0 ) ( * Nl3main_x1 lam5n1 ) ( * Nl3main_x2 lam5n2 ) ( * Nl3main_x3 lam5n3 ) ( - ( + 0 ( * Nl3main_x1 1 ) ) ) ) 0 ) ) ))
(assert ( or ( and ( >= lam4n0 0 ) ( >= lam4n1 0 ) ( >= lam4n2 0 ) ( >= lam4n3 0 ) ( > ( + ( * 1 lam4n0 ) ( * Nl3CT1 lam4n1 ) ( * Nl3CT2 lam4n2 ) ( * Nl3CT3 lam4n3 ) ( - 1 ) ) 0 ) ( = ( + ( * ( - 1 ) lam4n0 ) ( * Nl3main_x1 lam4n1 ) ( * Nl3main_x2 lam4n2 ) ( * Nl3main_x3 lam4n3 ) ) 0 ) ) ( and ( >= lam6n0 0 ) ( >= lam6n1 0 ) ( >= lam6n2 0 ) ( >= lam6n3 0 ) ( > ( + ( * 1 lam6n0 ) ( * Nl3CT1 lam6n1 ) ( * Nl3CT2 lam6n2 ) ( * Nl3CT3 lam6n3 ) ( - 1 ( + Nl3CT2 ( * Nl3main_x2 ( - 2 ) ) ) ) ) 0 ) ( = ( + ( * ( - 1 ) lam6n0 ) ( * Nl3main_x1 lam6n1 ) ( * Nl3main_x2 lam6n2 ) ( * Nl3main_x3 lam6n3 ) ( - ( + 0 ( * Nl3main_x2 1 ) ) ) ) 0 ) ) ))
(assert ( or ( and ( >= lam4n0 0 ) ( >= lam4n1 0 ) ( >= lam4n2 0 ) ( >= lam4n3 0 ) ( > ( + ( * 1 lam4n0 ) ( * Nl3CT1 lam4n1 ) ( * Nl3CT2 lam4n2 ) ( * Nl3CT3 lam4n3 ) ( - 1 ) ) 0 ) ( = ( + ( * ( - 1 ) lam4n0 ) ( * Nl3main_x1 lam4n1 ) ( * Nl3main_x2 lam4n2 ) ( * Nl3main_x3 lam4n3 ) ) 0 ) ) ( and ( >= lam7n0 0 ) ( >= lam7n1 0 ) ( >= lam7n2 0 ) ( >= lam7n3 0 ) ( > ( + ( * 1 lam7n0 ) ( * Nl3CT1 lam7n1 ) ( * Nl3CT2 lam7n2 ) ( * Nl3CT3 lam7n3 ) ( - 1 ( + Nl3CT3 ( * Nl3main_x3 ( - 2 ) ) ) ) ) 0 ) ( = ( + ( * ( - 1 ) lam7n0 ) ( * Nl3main_x1 lam7n1 ) ( * Nl3main_x2 lam7n2 ) ( * Nl3main_x3 lam7n3 ) ( - ( + 0 ( * Nl3main_x3 1 ) ) ) ) 0 ) ) ))
(assert ( and ( <= ( + Nl3CT1 ( * Nl3main_x1 FV_main_x_2 ) ) 0 ) ( <= ( + Nl3CT2 ( * Nl3main_x2 FV_main_x_2 ) ) 0 ) ( <= ( + Nl3CT3 ( * Nl3main_x3 FV_main_x_2 ) ) 0 ) ))
(assert ( and ( >= lam11n1 0 ) ( >= lam11n2 0 ) ( >= lam11n3 0 ) ( > ( + ( * Nl3CT1 lam11n1 ) ( * Nl3CT2 lam11n2 ) ( * Nl3CT3 lam11n3 ) ( - 1 ) ) 0 ) ( = ( + ( * 1 lam11n0 ) ( * Nl3main_x1 lam11n1 ) ( * Nl3main_x2 lam11n2 ) ( * Nl3main_x3 lam11n3 ) ) 0 ) ))
(assert ( and ( and ( <= ( + Nl3CT1 ( * Nl3main_x1 FV_main_x_3 ) ) 0 ) ( <= ( + Nl3CT2 ( * Nl3main_x2 FV_main_x_3 ) ) 0 ) ( <= ( + Nl3CT3 ( * Nl3main_x3 FV_main_x_3 ) ) 0 ) ) ( or ( <= ( + 1 FV_main_x_3 ) 0 ) ( <= ( + 1 ( * ( - 1 ) FV_main_x_3 ) ) 0 ) ) ))
(check-sat)
(exit)
